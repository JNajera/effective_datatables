:ruby
  effective_datatable_params = {
    id: "#{datatable.to_param}-table",
    class: "#{datatable.table_html_class}",
    data: {
      'effective-form-inputs' => defined?(EffectiveFormInputs),
      'bulk-actions' => datatable_bulk_actions(datatable),
      'columns' => datatable_columns(datatable),
      'display-order' => [datatable.order_index, datatable.order_direction].to_json(),
      'display-length' => datatable.display_length,
      'display-records' => (datatable.to_json[:recordsFiltered] || 0),
      'display-start' => datatable.display_start,
      'input-js-options' => local_assigns[:input_js_options],
      'simple' => datatable.simple?.to_s,
      'source' => effective_datatables.datatable_path(datatable, {format: 'json'}),
      'total-records' => (datatable.to_json[:recordsTotal] || 0)
    }
  }

%table.effective-datatable{effective_datatable_params}
  %thead
    - if datatable.columns.any? { |_, opts| opts[:th].present? } == false
      %tr
        - datatable.columns.each do |name, opts|
          %th= opts[:label] || name
    - else
      - max_depth = datatable.columns.map { |_, opts| opts[:th].try(:[], :depth) || 0 }.max
      - [*0..max_depth].each do |depth|
        %tr
          - columns = datatable.columns.select { |_, opts| (opts[:th].try(:[], :depth) || 0) == depth }
          - columns.each do |name, opts|
            %th{(opts[:th] || {}).merge(title: (opts[:label] || name))}
              = opts[:label] || name
            - (opts[:append_th] || []).each do |faux_col|
              %th{(faux_col[:th] || {}).merge(title: faux_col[:label])}
                = faux_col[:label]

  %tbody
    - datatable.to_json[:data].each do |row|
      %tr
        - row.each do |col|
          %td= col.to_s.html_safe

  - if datatable.to_json[:aggregates].present?
    %tfoot
      - datatable.to_json[:aggregates].each do |row|
        %tr
          - row.each do |col|
            %td= col.to_s.html_safe
