initializeDataTables = ->
  $('table[data-effective-datatables-table]').each ->
    unless $.fn.DataTable.fnIsDataTable(this)
      datatable = $(this)

      init_options =
        ajax: { url: datatable.data('source'), type: 'GET' }
        autoWidth: false
        processing: true
        deferRender: true
        serverSide: true
        #scrollX: true
        #scrollY: '300px'
        scrollCollapse: true
        #fixedColumns won't work with deferLoading
        deferLoading: [datatable.data('display-records'), datatable.data('total-records')]
        pagingType: 'simple_numbers'
        lengthMenu: [[10, 25, 50, 100, 250, 1000, -1], [10, 25, 50, 100, 250, 1000, 'All']]
        iDisplayLength: datatable.data('default-entries')
        columnDefs: [
          { visible: false, targets: datatable.data('non-visible') },
          { sortable: false, targets: datatable.data('non-sortable') }
        ].concat(datatable.data('column-classes') || []).concat(datatable.data('column-names') || [])
        order: datatable.data('default-order')
        colVis:
          showAll: 'Show all'
          restore: 'Show default'
          activate: 'click'
          label: (index, title, th) -> $(th).prop('title')
        tableTools:
          sSwfPath: "<%= asset_path('effective_datatables/copy_csv_xls_pdf.swf') %>",
          aButtons: ['csv', {'sExtends': 'xls', 'sButtonText': 'Excel'}, 'print']

      simple = datatable.data('effective-datatables-table') == 'simple'
      if simple
        init_options['lengthMenu'] = [-1] # Show all results
        init_options['dom'] = "<'row'r>t" # Just show the table

      # Initialize Filtering
      dataTableSearch = (event) ->
        obj = $(event.currentTarget)
        dataTable = obj.closest('table.dataTable').DataTable()
        dataTable.column(obj.data('index') || 0).search(obj.val()).draw()

      datatable.find('thead').find('input,select').each (index, input) ->
        $input = $(input)
        $input.on 'click', (event) -> false # Dont order columns when you click inside the input

        if $input.is('select')
          $input.on 'change', (event) -> dataTableSearch(event)
        else if $input.is('input')
          $input.keyup($.debounce(300, dataTableSearch))

      # Let's actually initialize the table now
      console.log "OPTIONS"
      console.log init_options
      table = datatable.dataTable(init_options)

      # fixedColumns = new $.fn.dataTable.FixedColumns(table,
      #  leftColumns: 2
      #  rightColumns: 1
      # )


## JuST CRAP BELOW HERE

#       table.oApi._fnCallbagReg()


# dtSettings.oApi._fnCallbackReg( dtSettings, 'aoInitComplete', function () {
#   //     console.log('calling fnConstruct init from callback');
#   //     that._fnConstruct( init );
#   //   }, 'FixedColumns' );
      # fixedColumns._fnConstruct(
      #   leftColumns: 2
      #   drawCallback: -> console.log('drawCallback')
      # )

      #  leftColumns: 2
      #  drawCallback: -> console.log('drawCallback')
      #)
      #fixedColumns._fnConstruct( init )

      ## Fixed Column
      #fixedColumns = new $.fn.dataTable.FixedColumns(table,
      #  leftColumns: 2
      #  drawCallback: -> console.log('drawCallback')
      #)
      #fixedColumns._fnConstruct( init )
      #fixedColumns._fnConstruct(table)

      #table.api().draw() doing a redraw will do an AJAX request but fixedColumns will totally work
      #fixedColumns._fnConstruct()
      #fixedColumns._fnClone()

      # aoColumnDefs = [
      #   { bSortable: false, aTargets: datatable.data('non-sortable') },
      #   { bVisible: false, aTargets: datatable.data('non-visible') }
      # ].concat(datatable.data('column-classes') || [])

      # init_options =
      #   bServerSide: true
      #   bProcessing: true
      #   bSaveState: true
      #   bAutoWidth: false
      #   deferLoading: [datatable.data('display-records'), datatable.data('total-records')]
      #   deferRender: true
      #   scrollX: true
      #   scrollCollapse: true
      #   order: datatable.data('default-order')
      #   ajax: datatable.data('source')
      #   pagingType: 'simple_numbers'
      #   lengthMenu: [[10, 25, 50, 100, 250, 1000, -1], [10, 25, 50, 100, 250, 1000, 'All']]
      #   iDisplayLength: datatable.data('default-entries')
      #   # fnServerParams: (aoData, a, b) ->
      #   #   table = this.DataTable()
      #   #   table.columns().flatten().each (index) ->  # Pass which columns are visible back to server
      #   #     aoData.push({'name': "sVisible_#{index}", 'value': table.column(index).visible()})

      #   aoColumnDefs: aoColumnDefs
      #   aoColumns: datatable.data('widths')
      #   oTableTools:
      #     sSwfPath: "<%= asset_path('effective_datatables/copy_csv_xls_pdf.swf') %>",
      #     aButtons: ['csv', {'sExtends': 'xls', 'sButtonText': 'Excel'}, 'print']
      #   colVis:
      #     showAll: 'Show all'
      #     restore: 'Show default'
      #     activate: 'mouseover'
      #     fnStateChange: (iCol, bVisible) ->
      #       table = $(this.dom.button).closest('.dataTables_wrapper').children('table').first().DataTable()
      #       table.draw()

      # simple = datatable.data('effective-datatables-table') == 'simple'
      # filter = datatable.data('filter')

      # if simple
      #   init_options['lengthMenu'] = [-1] # Show all results
      #   init_options['dom'] = "<'row'r>t" # Just show the table

      # # Actually initialize it
      # datatable = datatable.dataTable(init_options)

      # if filter
      #   datatable.columnFilter
      #     sPlaceHolder: 'head:after'
      #     aoColumns : datatable.data('filter')
      #     bUseColVis: true

      #   $.each (datatable.data('filter') || []), (index, filter) ->
      #     if(filter.selected)
      #       datatable.fnSettings().aoPreSearchCols[index].sSearch = filter.selected

$ -> initializeDataTables()
$(document).on 'page:change', -> initializeDataTables()
